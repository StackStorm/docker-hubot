# Setup in CircleCI account the following ENV variables:
# IS_PRODUCTION (default: 0)
# IS_ENTERPRISE
# PACKAGECLOUD_ORGANIZATION (default: stackstorm)
# PACKAGECLOUD_TOKEN
# SLACK_TOKEN
version: 2
jobs:
  build:
    machine: true
    working_directory: ~/StackStorm/st2chatops
    parallelism: 4
    shell: /bin/bash --login
    environment:
      DISTROS: bionic focal el7 el8
      ST2_PACKAGES_REPO: https://github.com/StackStorm/st2-packages
      ST2_TEST_ENVIRONMENT: https://github.com/StackStorm/st2-docker
      DEPLOY_PACKAGES: 1
    steps:
    - checkout
    - run:
        name: Get repos and dependencies
        command: |
          set -eu
          echo "Cloning ${ST2_PACKAGES_BRANCH:-master} branch of st2-packages"
          git clone --branch ${ST2_PACKAGES_BRANCH:-master} --depth 1 ${ST2_PACKAGES_REPO} ~/st2-packages
          # Use DEPRECATED/all-in-one for now, we'll have to circle back around
          # and fix this to use the master branch
          echo "Cloning ${ST2_DOCKER_BRANCH:-DEPRECATED/all-in-one} branch of st2-docker"
          git clone --branch ${ST2_DOCKER_BRANCH:-DEPRECATED/all-in-one} --depth 1 ${ST2_TEST_ENVIRONMENT} ~/st2-docker
          make -C ~/st2-docker env
          sudo apt-get update -qq && sudo apt-get install -y rpm jq nodejs net-tools
          gem install package_cloud
          sudo pip install "docker-compose==1.27.4"
          rm -rf node_modules
          # print versions
          docker-compose version
          nodejs -v
          jq --version
          package_cloud version
    - run:
        name: Ensure Docker running
        command: 'sudo docker info >/dev/null 2>&1 || sudo service docker start; '
    - run:
        name: Set up Ruby 2.0
        command: rvm use ruby-2.0.0-p645 --default
    - run:
        name: Get PackageCloud variables
        command: |
          set -e
          distros=($DISTROS)
          DISTRO=${distros[$CIRCLE_NODE_INDEX]}
          PKG_VERSION=$(nodejs -e "console.log(require('./package.json').st2_version);")
          if [ -n "$PACKAGECLOUD_TOKEN" ]; then
            PKG_RELEASE=$(~/st2-packages/.circle/packagecloud.sh next-revision ${DISTRO} ${PKG_VERSION} st2chatops)
          else
            PKG_RELEASE=1
          fi
          echo "export PKG_VERSION=${PKG_VERSION}" >> ~/.circlerc
          echo "export PKG_RELEASE=${PKG_RELEASE}" >> ~/.circlerc
          echo "export DISTRO=${DISTRO}" >> ~/.circlerc
          # Create required dirs
          mkdir -p ~/packages/${DISTRO}/log /tmp/st2chatops
    - run:
        name: Pull Docker build images
        command: |
          set -e
          docker-compose run ${DISTRO} pull
          docker-compose run ${DISTRO}-test pull
    - run:
        name: Build packages
        command: |
          source ~/.circlerc
          set -eu
          docker-compose run \
            -e PKG_VERSION=${PKG_VERSION} \
            -e PKG_RELEASE=${PKG_RELEASE} \
            ${DISTRO} build
          # Collect artifacts
          cp -r /tmp/st2chatops/*  ~/packages/${DISTRO}
    # TODO: The tests need to look for ERROR logs, e.g. due to /stream not reachable
    - run:
        name: Pull & launch Docker st2-docker images
        command: |
          set -eu
          docker-compose -f ~/st2-docker/docker-compose.yml pull
          docker-compose -f ~/st2-docker/docker-compose.yml up -d
          # sleep 10 is needed to allow the st2-docker test containers time to start up.
          # Otherwise st2api is not ready when the tests run.
          sleep 10 && echo 'Sleeping for 10 sec ...'
          docker-compose -f ~/st2-docker/docker-compose.yml exec stackstorm st2ctl status
          docker-compose -f ~/st2-docker/docker-compose.yml exec stackstorm st2 action-alias list
          # debug the interfaces
          echo '-----'
          ifconfig docker0
          echo '-----'
          ifconfig docker0 | sed -En -e 's/.*inet ([0-9.]+).*/\1/p'
          echo '-----'
          ifconfig docker0 | grep 'inet addr' | awk -F: '{print $2}' | awk '{print $1}'
          echo '-----'
    - run:
        name: Run tests
        command: |
          source ~/.circlerc
          set -eu
          sleep 10
          export ST2_HOSTNAME=$(ifconfig docker0 | sed -En -e 's/.*inet ([0-9.]+).*/\1/p')
          docker-compose run \
          -e ST2_HOSTNAME=${ST2_HOSTNAME} \
          -e ST2_USERNAME=${ST2_USER} \
          -e ST2_PASSWORD=${ST2_PASSWORD} \
          -e SLACK_TOKEN=${SLACK_TOKEN} \
          ${DISTRO}-test test
    - run:
        name: Collect logs
        command: for name in $(docker ps -a --format "{{.Names}}"); do docker logs ${name} > ~/packages/${DISTRO}/log/${name}.log 2>&1; done
    - store_artifacts:
        path: ~/packages
        destination: packages
    - persist_to_workspace:
        root: ~/
        paths:
          - st2-packages
          - packages

  # Deploy produced deb/rpm packages to PackageCloud staging
  deploy:
    docker:
      # The primary container is an instance of the first list image listed. Your build commands run in this container.
      - image: circleci/ruby:2.4
    working_directory: ~/packages
    environment:
      DISTROS: "bionic focal el7 el8"
    steps:
      - attach_workspace:
          at: /home/circleci
      - run:
          name: List packages
          command: find . | sed 's|[^/]*/|  |g'
      - run:
          name: Install dependencies
          command: gem install package_cloud
      - run:
          name: Deploy deb/rpm packages to PackageCloud
          command: |
            parallel -v -j0 --line-buffer  ~/st2-packages/.circle/packagecloud.sh deploy {} ~/packages/{} ::: ${DISTROS}

workflows:
  version: 2
  package-test-and-deploy:
    jobs:
      - build
      - deploy:
          requires:
            - build
          filters:
            branches:
              only:
                - master
                - /v[0-9]+\.[0-9]+/
                - feature/circleci
                - circle2.0
